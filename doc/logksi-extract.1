.TH LOGKSI-EXTRACT 1
.\"
.SH NAME
\fBlogksi extract \fR- Extracts log records and corresponding hash chains from the log files protected by KSI signatures.
.\"
.SH SYNOPSIS
.HP 4
\fBlogksi extract \fI<logfile> \fR[\fI<logfile.logsig>\fR] [\fB-o \fI<outfile>\fR] \fB-r \fIrecords\fR... [\fImore_options\fR]
.HP 4
\fBlogksi extract --log-from-stdin \fI<logfile.logsig> \fB-o \fI<outfile> \fB-r \fIrecords\fR... [\fImore_options\fR]
.HP 4
\fBlogksi extract --sig-from-stdin \fI<logfile> \fR[\fB-o \fI<outfile>\fR] \fB-r \fIrecords\fR... [\fImore_options\fR]
.\"
.SH DESCRIPTION
Extracts the specified record(s) from the given \fI<logfile>\fR and their KSI signature(s) from the respective log signature file \fI<logfile>.logsig\fR or \fI<logfile>.gtsig\fR. If the log signature file \fI<logfile.logsig>\fR is not specified, its name is derived from \fI<logfile>\fR by adding the \fI.logsig\fR suffix.
.LP
\fBlogksi extract\fR outputs the requested log record(s) to the file \fI<logfile>.excerpt\fR and creates the record integrity proof file \fI<logfile>.excerpt.logsig\fR for these records. If the files already exist, they will be overwritten.
.LP
The extracted log records' KSI signatures can be verified independently, thus individual log records can be presented and their integrity proven regardless the state or content of other log records saved in the same \fI<logfile>\fR. See \fBlogksi-verify\fR(1) for verification details.
.\"
.SH OPTIONS
.TP
.TP
\fI<logfile>\fR
Log file from which the specified log records will be extracted.
.\"
\fB--log-from-stdin\fR
Read the log file from \fIstdin\fR. If \fB--log-from-stdin\fR is used, the log signature file \fI<logfile.logsig>\fR must be specified and \fB--sig-from-stdin\fR cannot be used.
.TP
\fB--sig-from-stdin\fR
Read the log signature file from \fIstdin\fR. If \fB--sig-from-stdin\fR is specified, the log file \fI<logfile>\fR must be specified and \fB--log-from-stdin\fR cannot be used.
.TP
\fB-o \fI<outfile>\fR
Names of output files will be derived from \fI<outfile>\fR by adding the appropriate suffixes. Name of the log records file will be \fI<outfile>.excerpt\fR. Name of the integrity proof file will be \fI<outfile>.excerpt.logsig\fR. If \fI<outfile>\fR is not specified, names of output files will be derived from \fI<logfile>\fR by adding the same suffixes. If \fB--log-from-stdin\fR is specified, \fI<outfile>\fR must also be specified.
.TP
\fB--out-log \fI<log.records>\fR
Specify the name of the log records file. The log records file can be redirected to \fIstdout\fR by using '\fB-\fR' as the file name. If the log records file name is not specified with \fB--out-log\fR, its name will be derived from either \fI<outfile>\fR or \fI<logfile>\fR by adding the \fI.excerpt\fR suffix.
.TP
\fB--out-proof \fI<integrity.proof>\fR
Specify the name of the integrity proof file. The integrity proof file can be redirected to \fIstdout\fR (unless the log records file is also redirected to \fIstdout\fR) by using '\fB-\fR' as the file name. If the integrity proof file name is not specified with \fB--out-proof\fR, its name will be derived from either \fI<outfile>\fR or \fI<logfile>\fR by adding the \fI.excerpt.logsig\fR suffix.
.TP
\fB-r \fIrecords\fR
Specify the position(s) of record(s) to be extracted. Position of the first record is 1 and all positions must be defined in a strictly ascending order, using positive decimal numbers. Positions to be extracted can be defined either:
.RS
.IP \(bu 4
Individually: 1,2,3,4,8,9,10
.IP \(bu 4
In ranges: 1-4,8-10
.IP \(bu 4
Mixed: 1-4,8,9,10
.RE
.\"
.TP
\fB--ksig\fR
Extracts pure KSI signatures and corresponding log lines into separate files instead of single integrity proof file and single log records file. It enables possibility to verify log lines with basic KSI service and tools. File names can be derived from \fI<logfile>\fR, \fB-o\fR, \fB--out-log\fR and \fB--out-proof\fR by adding \fI.line.<nr>\fR and \fI.line.<nr>.ksig\fR suffix to log line file and KSI signature file respectively. If only one record is extracted, output of \fB--out-log\fR and \fB--out-proof\fR can be redirected to stdout by using '\fB-\fR' as the file name. As this feature may produce lots of different files, where direct output file name is derived from the user input, overwriting of existing file is restricted to avoid accidental corruption of data. It is not possible to extract pure KSI signature from RFC3161 timestamps (or from its converted form) as its aggregation hash chain level starts from 0. Because of that it is not possible to append any locally aggregated hash chains.
.\"
.TP
\fB-d\fR
Print detailed information about processes and errors to \fIstderr\fR. To make output more verbose increase debug level with \fB-dd\fR or \fB-ddd\fR. With debug level 1 a summary of log file is displayed. With debug level 2 a summary of each block and the log file is displayed. Debug level 3 will display the whole parsing of the log signature file. The parsing of \fIrecord hashes (r)\fR, \fItree hashes (.)\fR, \fIfinal tree hashes (:)\fR and \fImeta-records (M)\fR is displayed inside curly brackets in following manner \fI{r.Mr..:}\fR. In case of a failure \fI(X)\fR is displayed and closing curly bracket is omitted.
.\"
.TP
\fB--hex-to-str\fR
Will encode applicable hex encoded data fields to ASCII string (e.g. meta-record value). Non-printable characters are displayed in hex with leading backslash (e.g. 'Text\\00').
.\"
.TP
\fB--log \fIfile\fR
Write \fIlibksi\fR log to the given file. Use '\fB-\fR' as file name to redirect the log to \fIstdout\fR.
.br
.\"
.SH EXIT STATUS
See \fBlogksi\fR(1) for more information.
.\"
.SH EXAMPLES
.TP 2
\fB1
\fRExtract the records 1 to 200 and 250 to 260 from the log file \fI/var/log/secure\fR. The extracted records will be written to \fI/var/log/secure.excerpt\fR, the corresponding integrity proof file will be \fI/var/log/secure.excerpt.logsig\fR:
.LP
.RS 4
\fBlogksi extract \fI/var/log/secure \fB-r \fI1-200,250-260
.RE
.\"
.TP 2
\fB2
\fRExtract the records 4, 25 and 121 from the log file \fI/var/log/secure\fR.  The extracted records will be written to \fI/var/log/proof.excerpt\fR, the corresponding integrity proof file will be \fI/var/log/proof.excerpt.logsig\fR:
.LP
.RS 4
\fBlogksi extract \fI/var/log/secure \fB-o \fI/var/log/proof \fB-r \fI4,25,121
.RE
.\"
.TP 2
\fB3
\fRExtract the records 1-3 from the log file that is read from \fIstdin\fR. The KSI signature(s) will be read from \fI/var/log/messages.logsig\fR. The extracted records will be written to \fI/var/log/log.records\fR, the corresponding integrity proof will be directed to \fIstdout\fR:
.LP
.RS 4
\fBlogksi extract \fB--log-from-stdin \fI/var/log/messages.logsig \fB--out-log \fI/var/log/log.records \fB--out-proof \fR- \fB-r \fI1-3
.RE
.\"
.TP 2
\fB4
\fRExtract pure KSI signatures and log lines for records 1 and 3 from \fIsystemlog\fR (and \fIsystemlog.logsig\fR). Result is stored into four files - two for KSI signatures and rest for matching log lines. The result is verified with KSI tool.
.LP
.RS 4
\fBlogksi extract\fR \fIsystemlog\fR \fB-o\fR \fIextracted\fR \fB-r\fR \fI1,3\fR \fB--ksig\fR
.LP
\fBksi verify\fR \fIextracted.line.1.ksig\fR \fB-f\fR \fIextracted.line.1\fR
.LP
\fBksi verify\fR \fIextracted.line.3.ksig\fR \fB-f\fR \fIextracted.line.3\fR
.RE
.\"
.SH AUTHOR
Guardtime AS, http://www.guardtime.com/
.LP
.\"
.SH SEE ALSO
\fBlogksi\fR(1), \fBlogksi-create\fR(1), \fBlogksi-extend\fR(1), \fBlogksi-integrate\fR(1), \fBlogksi-sign\fR(1), \fBlogksi-verify\fR(1), \fBlogksi-conf\fR(5)
