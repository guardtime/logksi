.TH LOGKSI-CREATE 1
.\"
.SH NAME
\fBlogksi create \fR- Create log signatures from log files.
.\"
.SH SYNOPSIS
.HP 4
\fBlogksi create \fI<logfile>\fR \fB--seed\fR \fI<file>\fR \fB--blk-size\fR \fI<int>\fR [\fB--max-lvl\fR \fI<int>\fR] [\fB-o \fI<out.logsig>\fR] | [\fB--sig-dir \fI<dir>\fR] [\fB--keep-record-hashes\fR] [\fB--keep-tree-hashes\fR] \fB-S \fIURL \fR[\fB--aggr-user \fIuser \fB--aggr-key \fIkey\fR] [\fImore options\fR]
.HP 4
\fBlogksi create \fI<logfile>\fR \fR[\fImore_options\fR] \fB--\fR [\fI<logfile>\fR...]
.HP 4
\fBlogksi create \fR[\fImore_options\fR] \fB--\fR \fI<logfile>\fR...
.HP 4
\fBlogksi create \fB--log-file-list\fR \fI<file>\fR [\fB--log-file-list-delimiter\fR \fI<delimiter>\fR] \fR[\fImore_options\fR]
.HP 4
\fBlogksi create \fB--log-from-stdin\fR [\fB-o\fR \fI<file>]\fR \fR[\fImore_options\fR]
.HP 4
\fBlogksi create -S \fIURL \fR[\fB--aggr-user \fIuser \fB--aggr-key \fIkey\fR] \fB--dump-conf
.\"
.SH DESCRIPTION
Creates a new log signature from given log file \fI<logfile>\fR (or from \fIstdin\fR) by aggregating log records into Merkle tree and signing the root hash value with KSI signature. Aggregation is made using default hash algorithm or it can be specified using option \fB-H\fR. Each aggregation round takes 3 inputs - log file, a random seed (\fB--seed\fR) for masking of log records and optional input hash (see \fB--input-hash\fR and \fB--state\fR) for cryptographic linking of aggrgeation rounds. If \fB--input-hash\fR is omitted zero hash is used instead. Each aggregation round has 2 outputs - root value for signing and output hash for cryptographic linking of aggregation rounds (\fB--output-hash\fR  and \fB--state\fR).
.LP
A large log file may be divided into several aggregation rounds producing blocks where each has its own Merkel tree and KSI signature. The size of the expected block can be specified by \fB--max-lvl\fR or \fB--blk-size\fR. Note that the size of the Merkle tree is limited by the KSI service! It is possible to include record hashes (hash of the log line without masking) and/or tree hashes (intermediate hash values from Merkle tree) to log signature file using \fB--keep-record-hashes\fR and/or \fB--keep-tree-hashes\fR accordingly. Keeping optional hash values makes diagnostics more precise but it must be noted that the size of the log signature may grow significantly (log signature from 1M log lines produces log signature in size ~0.03 MB + rec. hashes -> ~35 MB + tree hashes -> ~105 MB)!
.LP
When at least one log signature file already exists, process is terminated immediately and nothing is done. To force overwriting option \fB--force-overwrite\fR is used. During signing process a temporary file is created and original is not affected until the output file is closed.
.LP
User must have access to KSI signing service (KSI Aggregator) for signing.
.\"
.SH OPTIONS
.TP
\fI<logfile>\fR
Name of the log file from what the log signature will be created. To sign a log file from stdin see option \fB--log-from-stdin\fR. To sign multiple log files see options \fB--\fR. By default the log signature is stored next to log file as \fI<logfile>.logsig\fR (see options \fB-o\fR and \fB--sig-dir\fR to change how the signature is stored).
.\"
.TP
\fB--\fR
Is used for signing multiple log files. \fBEverything\fR specified after the token is interpreted as \fI<logfile>\fR. This option can be used together with \fI<logfile>\fR and can even be left empty (e.g. for optional log files). If only one log file is signed it can be combined with \fB-o\fR, otherwise log signature file names are generated by appending \fI.logsig\fR extension to log file (see \fB--sig-dir\fR to change the output directory). Each log file generates corresponding log signature file.
.TP
.LP
It must be noted that the order of the log files is important as every logfile is cryptographically linked to each other. Log files must be ordered by the caller and are processed on command line from left to right.
\"
.TP
\fB--log-file-list\fR \fIfile\fR
Same as \fB--\fR but log file list is read from a file or from stdin (use '\fB-\fR' as file name to read log file list from \fIstdin\fR). This option can be useful when the list of log files is too long to represent it on the command line. By default file names are separated by whitespace characters (including new line). Empty lines are ignored. Quote (\fB'\fR) and double quote (\fB"\fR) can be used to include strings containing delimiters or delimiters can be escaped with backslash (\fB\\\fR). To change the delimiter see \fB--log-file-list-delimiter\fR. It can not be combined with other log file inputs and log file output \fB-o\fR.
.\"
.TP
\fB--log-file-list-delimiter\fR \fIdelimiter\fR
To change how the file names are separated from each other in log file list (see \fB--log-file-list\fR) specify the delimiter. There are two magical strings \fBnew-line\fR, where each line contains one log file name, and \fBspace\fR (default), where whitespace characters separates log file names. Otherwise the user can specify a single character from {\fB:;,|\fR}.
.\"
.TP
\fB--log-from-stdin\fR
Read log file from stdin (same as input log file is omitted). This option can not be used together with file inputs (\fI<logfile>\fR, \fB--\fR and \fB--log-file-list\fR). If output file name is not specified, log signature is stored as \fIstdin.logsig\fR.
.\"
.TP
\fB--seed \fIfile\fR
Specify random seed for masking. Random seed is a file containing enough bytes to provide a sequence of bytes, in the size of the output of hash algorithm used to build Merkle tree, for every block (see \fB-H\fR). Use '\fB-\fR' as file name to read the random from \fIstdin\fR.
.\"
.TP
\fB--seed-len \fIint\fR
Size of the random seed. If not set size of the seed is the size of the output of hash algorithm used to build Merkle tree (see \fB-H\fR).
.\"
.TP
\fB--max-lvl \fIint\fR
Set the maximum depth (0 - 31) of the Merkle tree. If used in combination with \fB--apply-remote-conf\fR, where service maximum level is provided, the smaller value is applied.
.\"
.TP
\fB--blk-size \fIint\fR
The maximum size of the block (how many log records are aggregated into single Merkle tree).
.\"
.TP
\fB--keep-record-hashes\fR
Include record hashes (hash value directly calculated from log line without any masking) into log signature file. Log signature without record hashes can still be verified but the diagnostics in case of failure is more difficult.
.\"
.TP
\fB--keep-tree-hashes\fR
Include intermediate Merkle tree (every tree node) hash values into log signature file. Log signature without tree hashes can still be verified but the diagnostics in case of failure is more difficult.
.\"
.TP
\fB--input-hash \fIhash|file\fR
Specify hash imprint for inter-linking (the last leaf from the previous log signature). Hash can be specified on command line or from a file containing its string representation. Hash format: <alg>:<hash in hex>. Use '\fB-\fR' as file name to read the imprint from \fIstdin\fR. Call \fBlogksi -h\fR to get the list of supported hash algorithms. See \fB--output-hash\fR to see how to extract the hash imprint from the previous log file. When used together with \fB--\fR or \fB--log-file-list\fR, only the first block uses the value as input hash.
.\"
.TP
\fB--output-hash \fIhash|file\fR
Output the last leaf from the log signature into file. Use '\fB-\fR' as file name to redirect hash imprint to \fIstdout\fR. See \fB--input-hash\fR to use the output hash as input hash to next log signature. When used together with \fB--\fR or \fB--log-file-list\fR, only the output hash of the last block is returned. Will always overwrite existing file.
.\"
.TP
\fB--state
Creates a binary state file that keeps aggregation hash algorithm and last leaf from the Merkle tree being built. State file helps to continue signing the logs and keeps cryptographic linking between different calls to logksi. Functionality is similar to using \fB--input-hash\fR and \fB--output-hash\fR but it requires less scripting and also configures aggregation hash algorithm. It must be noted that state file requires more frequent disk access as every log line will update the state!
.TP
.LP
The state file name is generated by appending \fI.state\fR extension to the log files name. If \fB--sig-dir\fR is specified state file is stored there. In case of multiple input log files state file name must be specified explicitly (see \fB--state-file-name\fR). State file is always overwritten.
.TP
.LP
If state file does not exist it is created and initialized (with \fB--input-hash\fR or zero hash). If state file already exists it is loaded and input hash and aggregation hash algorithm is used to initialize log signing process. Using option \fB-H\fR will override aggregation hash algorithm. With existing state file \fB--input-hash\fR can not be used.
.\"
.TP
\fB--state-file-name \fIfile\fR
Same as \fB--state\fR but state file is always stored at given location no matter what the log files name is, making it suitable for signing multiple log files in sequence (in one or multiple calls to logksi).
.\"
.TP
\fB-H \fIalg\fR
Use the given hash algorithm for hashing log records and aggregating the Merkle tree nodes. If not set, the default algorithm is used. Use \fBlogksi -h \fRto get the list of supported hash algorithms. If used in combination with \fB--apply-remote-conf\fR, the algorithm parameter provided by the server will be ignored.
.\"
.TP
\fB-o \fI<out.logsig>\fR
Specify the name of the created log signature file; recommended file extension is \fI.logsig\fR. If not specified, the log signature file is saved as \fI<logfile>.logsig\fR in the same folder where the \fI<logfile>\fR is located. An attempt to overwrite an existing log signature file will result in an error (see \fB--force-overwrite\fR). Use '\fB-\fR' as file name to redirect the output as a binary stream to \fIstdout\fR. This option can only be used when a single log file is used as input (exept with \fB--log-file-list\fR).
.\"
.TP
\fB--force-overwrite\fR
Force overwriting of an existing log signature file.
.\"
.TP
\fB-S \fIURL\fR
Specify the signing service (KSI Aggregator) URL. Supported URL schemes are: \fIhttp\fR, \fIhttps\fR, \fIksi+http\fR, \fIksi+https\fR and \fIksi+tcp\fR. It is possible to embed HTTP or KSI user info into the URL. With \fIksi+\fR suffix (e.g. ksi+http//user:key@...), user info is interpreted as KSI user info, otherwise (e.g. http//user:key@...) the user info is interpreted as HTTP user info. User info specified with \fB--aggr-user\fR and \fB--aggr-key\fR will overwrite the embedded values.
.\"
.TP
\fB--aggr-user \fIuser\fR
Specify the username for signing service.
.\"
.TP
\fB--aggr-key \fIkey\fR
Specify the HMAC key for signing service.
.\"
.TP
\fB--aggr-hmac-alg \fIalg\fR
Hash algorithm to be used for computing HMAC on outgoing messages towards KSI aggregator. If not set, default algorithm is used. Use \fBlogksi -h \fRto get the list of supported hash algorithms.
.\"
.TP
\fB-d\fR
Print detailed information about processes and errors to \fIstderr\fR. To make output more verbose increase debug level with \fB-dd\fR or \fB-ddd\fR. With debug level 1 a summary of log file is displayed. With debug level 2 a summary of each block and the log file is displayed. Debug level 3 will display the whole parsing of the log signature file. The parsing of \fIrecord hashes (r)\fR, \fItree hashes (.)\fR, \fIfinal tree hashes (:)\fR and \fImeta-records (M)\fR is displayed inside curly brackets in following manner \fI{r.Mr..:}\fR. In case of a failure \fI(X)\fR is displayed and closing curly bracket is omitted.
.\"
.TP
\fB--dump-conf\fR
Dump aggregator (URL specified by \fB-S\fR parameter) configuration in human-readable format to \fIstdout\fR.
.\"
.TP
\fB--show-progress\fR
Print signing progress. Only valid with -d and debug level 1.\fR
.\"
.TP
\fB--conf \fIfile\fR
Read configuration options from the given file. It must be noted that configuration options given explicitly on command line will override the ones in the configuration file. See \fBlogksi-conf\fR(5) for more information.
.\"
.TP
\fB--apply-remote-conf\fR
Obtain and apply additional configuration data from the aggregator. Following configuration parameters can be received:
.RS
.IP \(bu 4
\fBmaximum level\fR - Maximum allowed depth of the local aggregation tree. This can be set to a lower value with \fB--max-lvl\fR.
.LP
.IP \(bu 4
\fBaggregation hash algorithm\fR - Recommended hash function identifier to be used for hashing the file to be signed. This parameter can be overridden with \fB-H\fR.
.LP
Note that the described parameters are optional and may not be provided by the aggregator that you turn to. Use \fB--dump-conf\fR to view the provided configuration parameters.
.RE
.TP
.\"
.TP
\fB--log \fIfile\fR
Write libksi log to the given file. Use '\fB-\fR' as file name to redirect the log to \fIstdout\fR.
.br
.\"
.SH EXIT STATUS
See \fBlogksi\fR(1) for more information.
.\"
.SH EXAMPLES
In the following examples it is assumed that KSI service configuration options (URLs, access credentials) are defined. See \fBlogksi-conf\fR(5) for more information.
.\"
.TP 2
\fB1
To create a log signature (each block can hold 2^8 record hashes including meta record) from log file \fImylog.log\fR and stor it into default location at \fImylog.log\fR:
.LP
.RS 4
\fBlogksi create \fImylog.log\fR \fB--max-lvl \fI8\fR \fB--seed\fR \fI/dev/urandom\fR
.RE
.\"
.TP 2
\fB2
To create several log signatures cryptographically linked to each other from several log files (each block can hold 20 record hashes including meta record) and store the result next to log files (\fI.logsig\fR is added to the log file name):
.LP
.RS 4
\fBlogksi cretae \fB--blk-size \fI20\fR \fB--seed\fR \fI/dev/urandom\fR \fB--\fR \fImylog1.log mylog2.log mylog3.log\fR
.RE

.\"
.TP 2
\fB3
To create a log signature and bind it to previous and next log signatures \fB--input-hash\fR and \fB--output-hash\fR can be used to read / store hash value for cryptographic linking. To read the previous hash value from file \fIlast-leaf_1.hash\fR and store the next value to file \fIlast-leaf_2.hash\fR:
.LP
.RS 4
\fBlogksi create \fImylog.log\fR \fB--max-lvl \fI8\fR \fB--seed\fR \fI/dev/urandom\fR \fB--input-hash\fR \fIlast-leaf_1.hash\fR \fB--output-hash\fR \fIlast-leaf_2.hash\fR
.RE

.\"
.TP 2
\fB4
To create multiple log signatures from log file list and store the signatures to one not default directory:
.LP
.RS 4
# Content of the \fIlog_file_list\fR:
.RS 2
"/log/log1 /log/log2 /log/log3"
.RE
.LP
\fBlogksi create \fB--log-file-list\fR \fIlog_file_list\fR \fB--max-lvl \fI8\fR \fB--seed\fR \fI/dev/urandom\fR \fB--sig-dir\fR \fI/logsig\fR
.RE
.\"
.TP 2
\fB5
To sign a log file \fImylog.log\fR before the log rotation use \fB--state\fR to keep all log signatures cryptographically linked to each other:
.LP
.RS 4
# Close the log file and sign with logksi.
.LP
\fBlogksi create \fImylog.log\fR \fB--max-lvl \fI8\fR \fB--seed\fR \fI/dev/urandom\fR \fB--state\fR
.LP
# Move mylog.log, mylog.log.logsig to archive.
.LP
# Leave state file \fImylog.log.state\fR in place to keep cryptographic linking between future log signature files.
.RE
.SH ENVIRONMENT
Use the environment variable \fBKSI_CONF\fR to define the default configuration file. See \fBlogksi-conf\fR(5) for more information.
.LP
.SH AUTHOR
Guardtime AS, http://www.guardtime.com/
.LP
.SH SEE ALSO
\fBlogksi\fR(1), \fBlogksi-extend\fR(1), \fBlogksi-extract\fR(1), \fBlogksi-integrate\fR(1), \fBlogksi-verify\fR(1), \fBlogksi-conf\fR(5)
