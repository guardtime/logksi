.TH LOGKSI-VERIFY 1
.\"
.SH NAME
\fBlogksi verify \fR- Verify a log file using its log signature.
.\"
.SH SYNOPSIS
.HP 4
\fBlogksi verify \fI<logfile> \fR[\fI<logfile.logsig>\fR] [\fImore_options\fR]
.HP 4
\fBlogksi verify --log-from-stdin \fI<logfile.logsig>\fR [\fImore_options\fR]
.HP 4
\fBlogksi verify \fI<logfile>.excerpt \fR[\fI<logfile.excerpt.logsig>\fR] [\fImore_options\fR]
.HP 4
\fBlogksi verify --log-from-stdin \fI<logfile.excerpt.logsig>\fR [\fImore_options\fR]
.HP 4
\fBlogksi verify \fR[\fImore_options\fR] \fB--\fR \fI<logfile>\fR...
.HP 4
\fBlogksi verify --ver-int \fI<logfile> \fR[\fI<logfile.logsig>\fR] [\fImore_options\fR]
.HP 4
\fBlogksi verify --ver-cal \fI<logfile> \fR[\fI<logfile.logsig>\fR] \fB-X \fIURL \fR[\fB--ext-user \fIuser \fB--ext-key \fIkey\fR] [\fImore_options\fR]
.HP 4
\fBlogksi verify --ver-key \fI<logfile> \fR[\fI<logfile.logsig>\fR] \fB-P \fIURL \fR[\fB--cnstr \fIoid\fR=\fIvalue\fR]... [\fImore_options\fR]
.HP 4
\fBlogksi verify --ver-pub \fI<logfile> \fR[\fI<logfile.logsig>\fR] \fB--pub-str \fIpubstr \fR[\fB-x -X \fIURL \fR[\fB--ext-user \fIuser \fB--ext-key \fIkey\fR]] [\fImore_options\fR]
.HP 4
\fBlogksi verify --ver-pub \fI<logfile> \fR[\fI<logfile.logsig>\fR] \fB-P \fIURL \fR[\fB--cnstr \fIoid\fR=\fIvalue\fR]... \fR[\fB-x -X \fIURL \fR[\fB--ext-user \fIuser \fB--ext-key \fIkey\fR]] [\fImore_options\fR]
.\"
.SH DESCRIPTION
Verifies the log file \fI<logfile>\fR. The name of the log signature file is expected to be \fI<logfile>.logsig\fR or \fI<logfile>.gtsig\fR by default. To verify multiple log files and their inter-linking, ordered list of log files must be given after option \fB--\fR. If log signature file has not matching name and only one log file is verified, the name of the log signature file must be given explicitly after the \fI<logfile>\fR.
.LP
Alternatively the extracted log records present in the \fI<logfile>.excerpt\fR file can be verified. If not defined otherwise, then the log signature file acting as record integrity proof is expected to be \fI<logfile>.excerpt.logsig\fR. See \fBlogksi-extract\fR(1) for details regarding log records' extraction.
.LP
The log file to be verified can also be read from \fIstdin\fR using the \fB--log-from-stdin\fR option. In such case there is no default log signature file, thus its name should be explicitly defined.
.LP
If the log signature file contains RFC3161 timestamps, they are internally converted to KSI signatures before verification.
.LP
For each signed log block the root hash of the block is recomputed and then verified using the KSI signature of that block.
.LP
KSI signature can be verified using any of its standard verification policies:
.LP
.IP \(bu 4
Internal verification (\fB--ver-int\fR). Only internal consistency of the signature is checked and no trust anchor is used and no external resources are needed. This check is also performed as the first step in all other policies.
.IP \(bu 4
Calendar-based verification (\fB--ver-cal\fR). The signature is verified against calendar blockchain database at the KSI Extender. Verification is done by checking that the output hash value computed from the aggregation hash chain matches the corresponding entry in the calendar blockchain. Access to KSI Extender is needed.
.IP \(bu 4
Key-based verification (\fB--ver-key\fR). The signature must contain a calendar hash chain and a calendar authentication record that can be verified against the signing certificates. To be able to perform key-based verification user must have access to a trusted KSI publications file with signing certificates in it.
.IP \(bu 4
Publication-based verification (\fB--ver-pub\fR). The signature must be extended to a time of publication and contain a publication record unless automatic extension of the signature is enabled with \fB-x\fR. Verification is done by checking that the publication record in the signature matches a publication in the publications file or the publication string given on the command line. Publications file or publication string retrieved from printed media is needed.
.LP
It must be noted that only publication-based verification should be preferred in the long term as it does not rely on any keys and trusted services. The other policies can be used temporarily when the signature is created and there is not yet a publication to extend the signature to.
.LP
.SH LOG SIGNATURE VERIFICATION DETAILS
.SS VERIFY LOG RECORDS EMBEDDED TIME
Using option \fB--time-form\fR together with \fB--time-diff\fR, it is possible to extract and verify the date embedded into log lines. If only \fB--time-form\fR is specified, log block and file summary is updated with extracted time data (lowest and highest log record time in block and log file) and verification of embedded time is not performed. Option \fB--time-diff\fR together with signing time of the KSI signature forms a time window where all the log records in signed block must fit. In following examples \fILn\fR and \fISn\fR stand for log record and KSI signature accordingly. Log records are placed on time line by the embedded time, and KSI signature by the signing time. NB! Following representation is explanatory only and does not describe the actual order of objects inside the log signature.
.LP
.RS 4
Regular case where all log records and KSI signatures are strictly in chronological order. Option \fB--time-diff\fR is set to 5 creating a valid time window. First block is ok, but second fails as \fIL4\fR does not fit into expected time window relative to \fIS2\fR. See example \fB10\fR.
.RS 4
.LP
.EX
log file: (L1  L2      L3      S1)(L4  L5         L6      S2)
time:      1   2   3   4   5   6   7   8   9  10  11  12  13
time win.: |_______ 5s _______|    |   |_______ 5s ______|
                                   |
Failures:                          X
.EE
.RE
.LP
Irregular case, where log record embedded time is more recent than the KSI signature itself! This may have been caused by invalid system clock during log record creation. Option \fB--time-diff\fR is set to -5 creating a valid time window in another direction. First block is ok, but second fails as \fIL6\fR does not fit into expected time window relative to \fIS2\fR. See example \fB11\fR.
.RS 4
.LP
.EX
log file: (S1  L1  L2          L3)(S2  L4  L5             L6)
time:      1   2   3   4   5   6   7   8   9  10  11  12  13
time win.:   |______ -5s ______|     |______ -5s ______|  |
                                                          |
Failures:                                                 X
.EE
.RE
.LP
Irregular case, where some of the log record are more recent than the KSI signature, and some are less! This may have been caused by invalid system clock during log record creation. Option \fB--time-diff\fR is set to -2,2 creating a valid time window in both direction. First block is ok, but second fails as \fIL4\fR does not fit into expected time window relative to \fIS2\fR. See example \fB11\fR.
.RS 4
.LP
.EX
log file: (L1  L2  S1  L3        )(L4      L5     S2      L6)
time:      1   2   3   4   5   6   7   8   9  10  11  12  13
time win.: |_ 2 _|  |_ -2 _|       |       |_ 2 _|  |_ -2 _|
                                   |
Failures:                          X
.EE
.RE
.RE
.LP
Additionally the chronological order (e.g. 1, 2, 3, 4) of the log records is verified. If multiple log files are verified the most recent log record from the previous file is compared with the least recent log record in the first block of the current log file. Due to the network latency or invalid system clock, it is possible that some of the log records are not in chronological order (e.g. 1, 3, 2, 4) and this will make verification fail. To overcome this issue see \fB--time-disordered\fR.
.LP
.SS VERIFYING SIGNIG TIME DIFFERENCE OF CONSECUTIVE BLOCKS
Using option \fB--block-time-diff\fR signing time difference between consecutive block is verified against specified range. Difference is calculated by subtracting previous block signing time frome the currents block signing time. In irregular case (unsigned block signed later) where previous signing time is more recent than the currents block signing time, difference will be negative (see \fB--ignore-desc-block-time\fR to ignore those cases). If unsigned block is encountered and \fB--continue-on-fail\fR is set, check for the next signed block is skipped. Note that in following example the objects are ordered as found in actual log signature file and not ordered by the signing time!
.LP
.RS 4
Example of consecutive blocks, where are couple of normal blocks (\fISn\fR), some resigned blocks (\fIRSn\fR) and a block still left unsigned (\fIUSn\fR). The order of block signatures and time difference is displayed first. Under that is a table of different \fB--block-time-diff\fR values and verification results for all the blocks is shown. Success and failure is marked as \fIok\fR and \fIX\fR accordingly and if it is not possible to performe the check \fIna\fR is set as the result.
.RS 4
.LP
.EX
log blocks: S1    RS2    S3   US5    S5    S6   RS7     S8
sig. time:  1     10     5     ?     15    20    27     26
time diff.: |_ 9 _|_ -5 _|_ ? _|_ ? _|_ 5 _|_ 7 _|_ -1 _|

range
7  |  0,7      X     X      na    na    ok    ok    X
7 (ign. neg.)  X     ok     na    na    ok    ok    ok
-5 | -5,0      X     ok     na    na    X     X     ok
6,9            ok    X      na    na    X     ok    X
-2,oo          ok    X      na    na    ok    ok    ok
-oo,oo         ok    ok     na    na    ok    ok    ok
.EE
.RE
.\"
.SH OPTIONS
.TP
\fB--ver-int\fR
Perform internal verification.
.\"
.TP
\fB--ver-cal\fR
Perform calendar-based verification (use extending service).
.\"
.TP
\fB--ver-key\fR
Perform key-based verification.
.\"
.TP
\fB--ver-pub\fR
Perform publication-based verification (use with \fB-x\fR to permit extending).
.\"
.TP
\fI<logfile>\fR
Log file to be verified. If \fI<logfile>\fR is specified, \fB--log-from-stdin\fR cannot be used.
.\"
.TP
\fB--log-from-stdin\fR
Use to read the log file to be verified from the \fIstdin\fR. The corresponding log signature file must be explicitly specified.
.\"
.TP
\fB--\fR
If used, \fBeverything\fR specified after the token is interpreted as \fI<logfile>\fR. Note that log signature files can NOT be specified manually and must have matching file names to log files. If multiple log files are specified, both integrity and inter-linking between them is verified.
.\"
.TP
\fB--input-hash \fIhash\fR
Specify hash imprint for inter-linking (the last leaf from the previous log signature) verification. Hash can be specified on command line or from a file containing its string representation. Hash format: <alg>:<hash in hex>. Use '\fB-\fR' as file name to read the imprint from \fIstdin\fR. Call \fBlogksi -h\fR to get the list of supported hash algorithms. See \fB--output-hash\fR to see how to extract the hash imprint from the previous log signature. When used together with \fB--\fR, only the first log file is verified against specified value.
.\"
.TP
\fB--output-hash \fIfile\fR
Output the last leaf from the log signature into file. Use '\fB-\fR' as file name to redirect hash imprint to \fIstdout\fR. See \fB--input-hash\fR to see how to verify that log signature is bound with this log signature (where from the output hash was extracted). When used together with \fB--\fR, only the output hash of the last log file is returned.
.\"
.TP
\fB--ignore-desc-block-time\fR
Skip signing time verification where more recent log blocks must have more recent (or equal) signing time than previous blocks. If used together with \fB--block-time-diff\fR, negative time difference is not verified.
.\"
.TP
\fB--client-id \fIregexp\fR
Verifies if KSI signatures client ID is matching regular expression specified (e.g. "GT :: GT :: .* :: (test|admin|client)"). Note that the regular expression must have full match.
.\"
.TP
\fB--time-form \fIfmt\fR
Format string (\fIfmt\fR) is used to extract time stamp from the beginning of the log line to be matched with KSI signature signing time. \fIFmt\fR is specified by function \fIstrptime\fR and its documentation can be read for more details. \fIFmt\fR can contain regular characters and various formats. Some more common formats:
.RS
.RS
.IP \(bu 2
\fB%n\fR - Matches any whitespace characters.
.IP \(bu 2
\fB%Y %m %d\fR - The year (e.g. 2019),  month (1 - 12) and day (1 - 31) as a decimal number.
.IP \(bu 2
\fB%B\fR - A month (e.g. Apr) name according to the current locale.
.IP \(bu 2
\fB%H %M %S\fR - Hour (0 - 23), minute (0 - 59) and second (0 - 60).
.RE
.LP
Every character and format in \fIfmt\fR must have a match. For example "%n[%Y %m %d %H:%M:%S" can have 0-N whitespace characters followed by '[' and strict format for the timestamp. This will match a logline "[2019 4 1 00:00:34] ..." but will not accept any of the following: "[2019 4 1 00 00 34] ...", "[2019 4 1] ..." and "2019 4 1 00:00:34 ...".
.LP
If year info is not specified in log lines see option \fB--time-base\fR. If combined with \fB-d\fR or \fB-dd\fR log file and block summary is updated with extracted data. See \fB--time-diff\fR to enable and configure log record time verification.
.RE
.\"
.TP
\fB--time-base \fIyear\fR
Specify the year (e.g. 2019) when it can not be extracted with \fB--time-form\fR.
.\"
.TP
\fB--time-diff \fItime[,time]\fR
A specified time difference that with the signing time of the KSI signature forms a valid time window where all the log records must fit; either before signing time (use "-" sign to indicate negative value) or after signing time. Also the chronological order of the log records is checked. The difference can be specified as seconds (e.g 86400) or using integers followed by markers (e.g. 10d2H3M1S), where \fBd\fR, \fBH\fR, \fBM\fR and \fBS\fR stand for day, hour, minute and second accordingly. The order of the markers is not important but every marker can only be specified once. Marker \fBS\fR can be omitted for the last integer. See \fB--time-form\fR to see how to extract log record time. See example \fB10\fR.
.LP
.RS
In some cases, where log lines contain timestamps that point to a time after the KSI signature (e.g. due to machine clock difference), it is still possible to specify a valid negative time difference for verification (e.g. -15d). If there are both more and less recent log records, specify two time windows separated by comma (e.g. -15d,15d). NB! When using negative value make sure that You know why there is abnormal time difference between KSI signature and timestamps embedded into the log lines. See example \fB11\fR.
.RE
.\"
.TP
\fB--time-disordered \fItime\fR
Will permit log records to be disordered within specified range (e.g. with value 1 following sequence of time values is correct: 1, 3, 2, 4). This option is useful when verifying time values embedded into the log lines and multiple sources with slightly different system clock or network latency have produced logs where log record time is not always ascending! See \fB--time-form\fR and \fB--time-diff\fR to see how to enable this check.
.\"
.TP
\fB--block-time-diff \fItime[,time]\fR
An accepted time difference between consecutive blocks signing times in seconds (see \fB--time-diff\fR to learn how to use markers \fBd\fR, \fBH\fR, \fBM\fR and \fBS\fR). If specified once (e.g. 10), maximum difference is set, if specified twice (e.g. 10,20), minimum and maximum difference is set. To specify maximum value as infinity use \fBoo\fR. If there exist previous block that is more recent than current bock, time difference will be negative. To handle negative values it is possible to specify negative boundaries or ignore check on negative difference with \fB--ignore-desc-block-time\fR.
.\"
.TP
\fB--warn-client-id-change\fR
Will warn the user if KSI signatures client ID is not constant over all the blocks.
.\"
.TP
\fB--warn-same-block-time\fR
Prints a warning when two consecutive blocks have same signing time. When multiple log files are verified the last block from the previous file is compared with the first block from the current file.
.\"
.TP
\fB--continue-on-fail\fR
Can be used to continue verification to improve debugging of verification errors. Other errors (e.g. IO error) will terminate the verification. Problematic block is skipped and next block is verified. When interlinking check fails and previous block was skipped, error message is displayed and input hash from the current block's header is used instead to continue. Despite of continuation, errors are reported and logksi will exit code other than 0. See options \fB--use-stored-hash-on-fail\fR and \fB--use-computed-hash-on-fail\fR to debug hash comparison failures. When used together with debug level 2 (\fB-dd\fR), block summary may be missing some regular information as the data is not available (not reached due to of failure - e.g. signing time) or is incomplete (e.g. output hash).
.\"
.TP
\fB--use-stored-hash-on-fail\fR
Can be used to debug hash comparison failures, by using stored hash values to continue verification process. For example stored hash values in log signature file are: input hash in block header, record / meta-record / tree hashes in block or root hash value in KSI signature.
.\"
.TP
\fB--use-computed-hash-on-fail\fR
Can be used to debug hash comparison failures, by using computed hash values to continue verification process. For example computed hash values are: output hash computed from block data, record hash computed from log line and root hash computed from record hashes.
.\"
.TP
\fB-x\fR
Permit to use extender for publication-based verification. See \fBlogksi-exted\fR(1) fo details.
.\"
.TP
\fB-X \fIURL\fR
Specify the extending service (KSI Extender) URL.
.\"
.TP
\fB--ext-user \fIuser\fR
Specify the username for extending service.
.\"
.TP
\fB--ext-key \fIkey\fR
Specify the HMAC key for extending service.
.\"
.TP
\fB--ext-hmac-alg \fIalg\fR
Hash algorithm to be used for computing HMAC on outgoing messages towards KSI extender. If not set, default algorithm is used. Use \fBlogksi -h \fRto get the list of supported hash algorithms.
.TP
\fB-P \fIURL\fR
Specify the publications file URL (or file with URI scheme 'file://').
.\"
.TP
\fB--cnstr \fIoid\fR=\fIvalue\fR
Specify the OID of the PKI certificate field (e.g. e-mail address) and the expected value to qualify the certificate for verification of publications file's PKI signature. At least one constraint must be defined. All values from lower priority sources are ignored (see \fBlogksi-conf\fR(5) for more information).
.RS
.HP 0
For more common OIDs there are convenience names defined:
.IP \(bu 4
\fBE\fR or \fBemail\fR for OID 1.2.840.113549.1.9.1
.IP \(bu 4
\fBCN\fR or \fBcname\fR for OID 2.5.4.3
.IP \(bu 4
\fBC or \fBcountry\fR for OID 2.5.4.6
.IP \(bu 4
\fBO\fR or \fBorg\fR for OID 2.5.4.10
.RE
.\"
.TP
\fB--pub-str \fIstr\fR
Specify the publication string to verify with.
.\"
.TP
\fB-V \fIfile\fR
Specify the certificate file in PEM format for publications file verification. All values from lower priority sources are ignored (see \fBlogksi-conf\fR(5)).
.\"
.TP
\fB-d\fR
Print detailed information about processes and errors to \fIstderr\fR. To make output more verbose increase debug level with \fB-dd\fR or \fB-ddd\fR. With debug level 1 a summary of log file is displayed. With debug level 2 a summary of each block and the log file is displayed. Debug level 3 will display the whole parsing of the log signature file. The parsing of \fIrecord hashes (r)\fR, \fItree hashes (.)\fR, \fIfinal tree hashes (:)\fR and \fImeta-records (M)\fR is displayed inside curly brackets in following manner \fI{r.Mr..:}\fR. In case of a failure \fI(X)\fR is displayed and closing curly bracket is omitted.
.TP
.\"
.TP
\fB--hex-to-str\fR
Will encode applicable hex encoded data fields to ASCII string (e.g. meta-record value). Non-printable characters are displayed in hex with leading backslash (e.g. 'Text\\00').
.\"
.TP
\fB--conf \fIfile\fR
Read configuration options from the given file. It must be noted that configuration options given explicitly on command line will override the ones in the configuration file (see \fBlogksi-conf\fR(5) for more information).
.\"
.TP
\fB--log \fIfile\fR
Write libksi log to the given file. Use '-' as file name to redirect log to \fIstdout\fR.
.br
.\"
.SH EXIT STATUS
See \fBlogksi\fR(1) for more information.
.\"
.SH EXAMPLES
In the following examples it is assumed that KSI service configuration options (URLs, access credentials) are defined. See \fBlogksi-conf\fR(5) for more information.
.\"
.TP 2
\fB1
\fRTo verify \fI/var/log/secure\fR using only internal verification of KSI signatures:
.LP
.RS 4
\fBlogksi verify --ver-int \fI/var/log/secure\fR
.RE
.\"
.TP 2
\fB2
\fRTo verify \fI/var/log/secure\fR using publication-based verification of the KSI signatures with specified publication string:
.LP
.RS 4
\fBlogksi verify --ver-pub \fI/var/log/secure\fR \fB--pub-str \fIAAAAAA-CWYEKQ-AAIYPA-UJ4GRT-HXMFBE-OTB4AB-XH3PT3-KNIKGV-PYCJXU-HL2TN4-RG6SCC-3ZGSBM
.RE
.\"
.TP 2
\fB3
\fRTo verify \fI/var/log/secure\fR using publication-based verification of the KSI signatures and publications file which is auto-downloaded and verified based on the default configuration options:
.LP
.RS 4
\fBlogksi verify --ver-pub \fI/var/log/secure\fR
.RE
.\"
.TP 2
\fB4
\fRTo verify \fI/var/log/secure\fR using publication-based verification of the KSI signatures and possibly extending them on the fly:
.LP
.RS 4
\fBlogksi verify --ver-pub \fI/varlog/secure\fR \fB-x
.RE
.\"
.TP 2
\fB5
To verify \fI/var/log/secure\fR using any policy possible, depending on the current state of the signatures:
.LP
.RS 4
\fBlogksi verify \fI/var/log/secure\fR
.RE
.\"
.TP 2
\fB6
To verify log records extracted from \fI/var/log/secure\fR using any policy possible, depending on the current state of the signatures:
.LP
.RS 4
\fBlogksi verify \fI/var/log/secure.excerpt\fR
.RE
.\"
.TP 2
\fB7
To verify the compressed log file \fI/var/log/secure.gz\fR using any policy possible, depending on the current state of the signatures:
.LP
.RS 4
\fBzcat \fI/var/log/secure.gz\fR | \fBlogksi verify \fI/var/log/secure.logsig \fB--log-from-stdin
.RE
.\"
.TP 2
\fB8
To verify integrity and inter-linking of two log signatures where the previous signature is not available but its last leaf hash imprint is stored to a file:
.LP
.RS 4
\fBlogksi verify \fI/var/log/previous\fR \fB--output-hash \fIlastleaf\fR
.LP
\fBlogksi verify \fI/var/log/next\fR \fB--input-hash \fIlastleaf\fR
.RE
.\"
.TP 2
\fB9
To verify integrity and inter-linking of multiple log files (note that signature files must match with log file e.g. log1.logsig):
.LP
.RS 4
\fBlogksi verify -- log1 log2 log3 log4
.RE
.\"
.TP 3
\fB10
To verify time embedded into log lines against KSI signature signing time '\fB--time-form\fR [%B %d %H:%M:%S' and '\fB--time-diff\fR 1d3S' (or greater) must be used. As the year number is not included inside timestamp and is represented in file name, it must be specified manually with '\fB--time-base\fR 2019'.
.LP
.RS 4
.EX
Time extract pattern (reformatted to align example log lines):
  [%B  %d %H:%M:%S
.EE
.LP
.EX
Log file log2019-1:
  [Apr 22 00:00:00] log line 1.
  [Apr 22 00:01:34] log line 2.
  ...
  [Apr 22 23:59:59] log line N.
.EE
.LP
.EX
KSI signature:
  2019-04-23 00:00:03
.EE
.LP
.EX
Time line:
  log file: (L1 ..  L2 ..  LN    .. S1   )
  time:      0  ..  94 ..  86399 .. 86403
  time win.: |_______ 86403s ______|
.EE
.LP
\fBlogksi verify \fIlog2019-1 \fB--time-form\fR \fI"[%B %d %H:%M:%S"\fR \fB--time-diff\fR \fI1d3S\fR \fB--time-base\fR \fI2019\fR
.RE
.\"
.TP 3
\fB11
To verify time embedded into log lines against KSI signature signing time, where some of the log lines are more recent than KSI signature, a time window in both directions must be specified. For verification '\fB--time-form\fR %Y-%m-%d %H:%M:%S' and '\fB--time-diff\fR -23H58M24,1M35' (or larger time window) must be used.
.LP
.RS 4
.EX
Time extract pattern (reformatted to align example log lines):
    %Y-%m-%d %H:%M:%S
.EE
.LP
.EX
Log file log2019-1:
  2019-04-22 00:00:00 log line 1.
  2019-04-22 00:01:34 log line 2.
  2019-04-22 00:01:54 log line 3.
  ...
  2019-04-22 23:59:59 log line N.
.EE
.LP
.EX
KSI signature:
  2019-04-22 00:01:35
.EE
.LP
.EX
Time line:
  log file: (L1 ..  L2 S1 .. L3  .. LN   )
  time:      0  ..  94 95 .. 114 .. 86399
  time win.: |_ 95s __|  |_ -86304 _|
.EE
.LP
\fBlogksi verify \fIlog2019-1 \fB--time-form\fR \fI"[%Y-%m-%d %H:%M:%S"\fR \fB--time-diff\fR \fI-23H58M24S,1M35\fR
.RE
.\"
.SH ENVIRONMENT
Use the environment variable \fBKSI_CONF\fR to define the default configuration file. See \fBlogksi-conf\fR(5) for more information.
.LP
.\"
.SH AUTHOR
Guardtime AS, http://www.guardtime.com/
.LP
.\"
.SH SEE ALSO
\fBlogksi\fR(1), \fBlogksi-extend\fR(1), \fBlogksi-extract\fR(1), \fBlogksi-integrate\fR(1), \fBlogksi-sign\fR(1), \fBlogksi-conf\fR(5)