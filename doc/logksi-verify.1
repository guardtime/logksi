.TH LOGKSI-VERIFY 1
.\"
.SH NAME
\fBlogksi verify \fR- Verify log file using its log signature.
.\"
.SH SYNOPSIS
.HP 4
\fBlogksi verify \fIlogfile \fR[\fIlogfile.logsig\fR] [\fImore_options\fR]
.HP 4
\fBlogksi verify --ver-int \fIlogfile \fR[\fIlogfile.logsig\fR] [\fImore_options\fR]
.HP 4
\fBlogksi verify --ver-cal \fIlogfile \fR[\fIlogfile.logsig\fR] \fB-X \fIURL \fR[\fB--ext-user \fIuser \fB--ext-key \fIkey\fR] [\fImore_options\fR]
.HP 4
\fBlogksi verify --ver-key \fIlogfile \fR[\fIlogfile.logsig\fR] \fB-P \fIURL \fR[\fB--cnstr \fIoid\fR=\fIvalue\fR]... [\fImore_options\fR]
.HP 4
\fBlogksi verify --ver-pub \fIlogfile \fR[\fIlogfile.logsig\fR] \fB--pub-str \fIpubstr \fR[\fB-x -X \fIURL \fR[\fB--ext-user \fIuser \fB--ext-key \fIkey\fR]] [\fImore_options\fR]
.HP 4
\fBlogksi verify --ver-pub \fIlogfile \fR[\fIlogfile.logsig\fR] \fB-P \fIURL \fR[\fB--cnstr \fIoid\fR=\fIvalue\fR]... \fR[\fB-x -X \fIURL \fR[\fB--ext-user \fIuser \fB--ext-key \fIkey\fR]] [\fImore_options\fR]
.\"
.SH DESCRIPTION
Verifies log file \fIlogfile\fR. The log signature is by default expected to be found in \fIlogfile.logsig\fR. If this is not the case, the correct log signature file name must be given after the \fIlogfile\fR.
.LP
For each signed log block the root hash of the block is recomputed and then verified using the KSI signature of that block.
.LP
KSI signature can be verified using any of its standard verification policies:
.LP
.IP \(bu 4
Internal verification (\fB--ver-int\fR). Only internal consistency of the signature is checked and no trust anchor is used and no external resources are needed. This check is also performed as the first step in all other policies.
.IP \(bu 4
Calendar-based verification (\fB--ver-cal\fR). Signature is verified against calendar blockchain database at the KSI Extender. Verification is done by checking that the output hash value computed from the aggregation hash chain matches the corresponding entry in the calendar blockchain. Access to KSI Extender is needed.
.IP \(bu 4
Key-based verification (\fB--ver-key\fR). Signature must contain a calendar hash chain and a calendar authentication record that can be verified against the signing certificates. To be able to perform key-based verification user must have an access to a trusted KSI publications file with signing certificates in it.
.IP \(bu 4
Publication-based verification (\fB--ver-pub\fR). Signature must be extended to a time of publication and contain a publication record unless automatic extension of the signature is enabled with \fB-x\fR. Verification is done by checking that the publication record in the signature matches a publication in the publications file or the publication string given on the command line. Publications file or publication string retrieved from printed media is needed.
.LP
It must be noted that only publication-based verification should be preferred in long term as it does not rely on any keys and trusted services. The other policies can be used temporarily when the signature is created and there is not yet a publication to extend the signature to.
.\"
.SH OPTIONS
.TP
\fB--ver-int\fR
Perform internal verification.
.\"
.TP
\fB--ver-cal\fR
Perform calendar-based verification (use extending service).
.\"
.TP
\fB--ver-key\fR
Perform key-based verification.
.\"
.TP
\fB--ver-pub\fR
Perform publication-based verification (use with \fB-x\fR to permit extending).
.\"
.TP
\fB-x\fR
Permit to use extender for publication-based verification. See \fBlogksi-exted\fR(1) fo details.
.\"
.TP
\fB-X \fIURL\fR
Specify the extending service (KSI Extender) URL.
.\"
.TP
\fB--ext-user \fIuser\fR
Specify the username for extending service.
.\"
.TP
\fB--ext-key \fIkey\fR
Specify the HMAC key for extending service.
.\"
.TP
\fB--pub-str \fIstr\fR
Specify the publication string to verify with.
.\"
.TP
\fB-P \fIURL\fR
Specify the publications file URL (or file with URI scheme 'file://').
.\"
.TP
\fB--cnstr \fIoid\fR=\fIvalue\fR
Specify the OID of the PKI certificate field (e.g. e-mail address) and the expected value to qualify the certificate for verification of publications file's PKI signature. At least one constraint must be defined. All values from lower priority source are ignored (see \fBlogksi-conf\fR(5) for more information).
.RS
.HP 0
For more common OIDs there are convenience names defined:
.IP \(bu 4
\fBE\fR or \fBemail\fR for OID 1.2.840.113549.1.9.1
.IP \(bu 4
\fBCN\fR or \fBcname\fR for OID 2.5.4.3
.IP \(bu 4
\fBC or \fBcountry\fR for OID 2.5.4.6
.IP \(bu 4
\fBO\fR or \fBorg\fR for OID 2.5.4.10
.RE
.\"
.TP
\fB-V \fIfile\fR
Specify the certificate file in PEM format for publications file verification. All values from lower priority source are ignored (see \fBlogksi-conf\fR(5)).
.\"
.TP
\fB-d\fR
Print detailed information about processes and errors to \fIstderr\fR.
.\"
.TP
\fB--conf \fIfile\fR
Read configuration options from given file. It must be noted that configuration options given explicitly on command line will override the ones in the configuration file (see \fBlogksi-conf\fR(5) for more information).
.\"
.TP
\fB--log \fIfile\fR
Write libksi log to given file. Use '-' as file name to redirect log to \fIstdout\fR.
.br
.\"
.SH EXIT STATUS
See \fBlogksi\fR(1) for more information.
.\"
.SH EXAMPLES
In the following examples it is assumed that KSI service configuration options (URLs, access credentials) are defined. See \fBlogksi-conf\fR(5) for more information.
.\"
.TP 2
\fB1
\fRTo verify \fI/var/log/secure\fR using only internal verification of KSI signatures:
.LP
.RS 4
\fBlogksi verify --ver-int \fI/var/log/secure\fR
.RE
.\"
.TP 2
\fB2
\fRTo verify \fI/var/log/secure\fR using publication-based verification of the KSI signatures with specified publication string:
.LP
.RS 4
\fBlogksi verify --ver-pub \fI/var/log/secure\fR \fB--pub-str \fIAAAAAA-CWYEKQ-AAIYPA-UJ4GRT-HXMFBE-OTB4AB-XH3PT3-KNIKGV-PYCJXU-HL2TN4-RG6SCC-3ZGSBM
.RE
.\"
.TP 2
\fB3
\fRTo verify \fI/var/log/secure\fR using publication-based verification of the KSI signatures and publications file which is auto-downloaded and verified based on the default configuration options:
.LP
.RS 4
\fBlogksi verify --ver-pub \fI/var/log/secure\fR
.RE
.\"
.TP 2
\fB4
\fRTo verify \fI/var/log/secure\fR using publication-based verification of the KSI signatures and possibly extending them on the fly:
.LP
.RS 4
\fBlogksi verify --ver-pub \fI/varlog/secure\fR \fB-x
.RE
.\"
.TP 2
\fB5
To verify \fI/var/log/secure\fR using any policy possible, depending on the current state of the signatures:
.LP
.RS 4
\fBlogksi verify \fI/var/log/secure\fR
.RE
.\"
.SH ENVIRONMENT
Use the environment variable \fBKSI_CONF\fR to define the default configuration file. See \fBlogksi-conf\fR(5) for more information.
.LP
.\"
.SH AUTHOR
Guardtime AS, http://www.guardtime.com/
.LP
.\"
.SH SEE ALSO
\fBlogksi\fR(1), \fBlogksi-sign\fR(1), \fBlogksi-integrate\fR(1), \fBlogksi-extend\fR(1), \fBlogksi-conf\fR(5)
